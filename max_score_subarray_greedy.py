from unittest import TestCase
from typing import List


def get_max_score(nums: List[int], k: int) -> int:
    i = k
    j = k
    L = len(nums)
    min_value = nums[k]
    max_score = min_value
    while i > 0 or j < L - 1:
        min_value = min(min_value, nums[i], nums[j])
        score = min_value * (j - i + 1)
        if score > max_score:
            max_score = score
        if i == 0:
            j += 1
        elif j == L - 1:
            i -= 1
        elif nums[i-1] < nums[j+1]:
            j += 1
        else:
            i -= 1
    return max_score


class Solution:
    def maximumScore(self, nums: List[int], k: int) -> int:
        return get_max_score(nums=nums, k=k)


class TestMaxScore(TestCase):
    def test1(self) -> None:
        max_score = get_max_score(nums=[1, 4, 3, 7, 4, 5], k=3)
        self.assertEqual(max_score, 15)

    def test2(self) -> None:
        max_score = get_max_score(nums=[5, 5, 4, 5, 4, 1, 1, 1], k=0)
        self.assertEqual(max_score, 20)

    def test3(self) -> None:
        max_score = get_max_score(nums=[1, 2, 7, 8, 7, 1], k=2)
        self.assertEqual(max_score, 21)

    def test4(self) -> None:
        nums = [4, 5, 4, 1, 1, 7, 5, 5]
        max_score = get_max_score(nums=nums, k=2)
        self.assertEqual(max_score, 12)

    def test5(self) -> None:
        nums = [4, 5, 4, 1, 1, 7, 5, 5]
        max_score = get_max_score(nums=nums, k=5)
        self.assertEqual(max_score, 15)

    def test_long(self) -> None:
        nums = [1301,5849,5714,435,8962,239,2942,8905,7984,981,9091,2069,2775,5874,1226,2347,8145,9079,5433,6498,343,6507,841,9491,4870,476,2687,1254,3517,3316,1910,6489,1787,6203,6232,7959,8301,7448,6103,9374,2071,3800,4737,3869,4090,4619,9828,766,3283,231,4338,7233,799,7350,1451,8605,1666,6833,4553,7334,2070,2518,230,5928,2209,4298,1139,4122,7585,8888,3121,2130,2993,3853,5131,8078,5368,8946,3724,9279,4481,298,5224,6415,4909,2682,8430,2064,6281,4901,2271,1860,415,1472,5705,7580,5543,3401,9397,489,6701,1114,6139,8706,3241,1308,2021,8154,1471,4119,488,8084,5665,8409,7233,5282,3067,3491,3632,6908,9559,6028,8498,9553,6831,6719,2365,5103,4520,4110,1936,1677,5730,9310,9431,2079,3516,3876,7384,4650,3250,7319,6812,1181,3594,4778,4630,3004,2429,1066,9527,9449,1897,3306,7134,2909,5390,703,4688,7166,6821,2743,239,4174,1652,8981,4796,6429,5594,785,8850,6284,8347,2432,1376,3075,2718,2097,556,5213,6821,4514,3407,1706,3865,7415,8069,9943,592,3621,6210,9302,3514,8313,3211,5458,6363,9878,4968,7258,6175,2221,7335,2462,5887,5074,8463,345,9110,5265,2781,8067,8880,1751,7798,6738,3966,3667,1992,5654,1935,1134,117,4273,3606,4436,8603,7905,2769,6900,2220,3302,5852,4861,6438,2764,4073,5406,8659,5834,1253,3731,7325,1849,2747,3896,8358,772,338,3658,7578,8017,3358,1776,4913,9817,6467,8681,8451,6363,5655,9981,5661,3761,8867,3320,4245,4616,969,9447,7619,2982,3211,1376,5733,8959,6327,3316,6725,8011,9467,6818,1156,7794,8221,1080,1191,2068,3046,5775,1118,7709,1910,289,7499,8814,7555,3877,4117,9825,1740,9947,3473,7632,8937,5553,3034,554,312,4545,4374,3495,5911,6369,7002,4071,5943,3172,8237,5628,2175,6177,9064,8292,1270,9214,5248,925,446,6229,7880,7817,115,9306,3316,3329,1339,5223,5066,9164,8159,7429,9496,8176,6847,9256,1779,4156,8389,2620,1926,2393,6185,6700,7000,9959,1238,490,9701,9640,1841,2701,1563,1915,9404,9272,9418,6297,5650,7845,5816,3149,1563,6038,912,6078,5854,3162,7876,5622,8591,7788,5521,1609,9122,2235,1882,5471,574,1627,5930,6728,4465,4309,644,4489,1915,1241,2125,5782,2866,3245,9445,8560,5039,7179,9345,6563,650,6501,6992,9528,1534,2531,7547,6402,336,7522,7509,2728,8992,844,932,6659,8961,8338,8683,8865,7471,6325,8538,5122,514,6270,4885,9206,2983,690,569,9841,3919,8301,8409,9214,2510,10000,7483]
        max_score = get_max_score(nums=nums, k=5)
        self.assertEqual(max_score, 51405)